// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Home renders correctly with Home screen 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#fff",
      "flex": 1,
      "justifyContent": "center",
    }
  }
>
  <RCTScrollView
    closeOnRowBeginSwipe={false}
    closeOnRowOpen={true}
    closeOnRowPress={true}
    closeOnScroll={true}
    data={Array []}
    directionalDistanceChangeThreshold={2}
    disableHiddenLayoutCalculation={false}
    disableLeftSwipe={false}
    disableRightSwipe={false}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    leftOpenValue={0}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    previewFirstRow={false}
    previewRepeat={false}
    previewRepeatDelay={1000}
    recalculateHiddenLayout={true}
    removeClippedSubviews={false}
    renderHiddenItem={[Function]}
    renderItem={[Function]}
    rightOpenValue={-100}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "width": "100%",
      }
    }
    swipeToClosePercent={50}
    swipeToOpenPercent={50}
    swipeToOpenVelocityContribution={0}
    updateCellsBatchingPeriod={50}
    useAnimatedList={false}
    useNativeDriver={true}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View />
  </RCTScrollView>
  <RNCSafeAreaView
    edges={
      Array [
        "bottom",
      ]
    }
    style={
      Object {
        "backgroundColor": "gray",
        "width": "100%",
      }
    }
  >
    <View
      accessibilityRole="button"
      accessibilityState={Object {}}
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Start Recording
        </Text>
      </View>
    </View>
  </RNCSafeAreaView>
</View>
`;

exports[`Home renders correctly with Home screen empty 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#fff",
      "flex": 1,
      "justifyContent": "center",
    }
  }
>
  <RCTScrollView
    closeOnRowBeginSwipe={false}
    closeOnRowOpen={true}
    closeOnRowPress={true}
    closeOnScroll={true}
    data={Array []}
    directionalDistanceChangeThreshold={2}
    disableHiddenLayoutCalculation={false}
    disableLeftSwipe={false}
    disableRightSwipe={false}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    leftOpenValue={0}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    previewFirstRow={false}
    previewRepeat={false}
    previewRepeatDelay={1000}
    recalculateHiddenLayout={true}
    removeClippedSubviews={false}
    renderHiddenItem={[Function]}
    renderItem={[Function]}
    rightOpenValue={-100}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "width": "100%",
      }
    }
    swipeToClosePercent={50}
    swipeToOpenPercent={50}
    swipeToOpenVelocityContribution={0}
    updateCellsBatchingPeriod={50}
    useAnimatedList={false}
    useNativeDriver={true}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View />
  </RCTScrollView>
  <RNCSafeAreaView
    edges={
      Array [
        "bottom",
      ]
    }
    style={
      Object {
        "backgroundColor": "gray",
        "width": "100%",
      }
    }
  >
    <View
      accessibilityRole="button"
      accessibilityState={Object {}}
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Start Recording
        </Text>
      </View>
    </View>
  </RNCSafeAreaView>
</View>
`;

exports[`Home renders correctly with Home screen with 1 item 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#fff",
      "flex": 1,
      "justifyContent": "center",
    }
  }
>
  <RCTScrollView
    closeOnRowBeginSwipe={false}
    closeOnRowOpen={true}
    closeOnRowPress={true}
    closeOnScroll={true}
    data={
      Array [
        Object {
          "createdAt": 1632051148156,
          "uri": "testuri",
        },
      ]
    }
    directionalDistanceChangeThreshold={2}
    disableHiddenLayoutCalculation={false}
    disableLeftSwipe={false}
    disableRightSwipe={false}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    leftOpenValue={0}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    previewFirstRow={false}
    previewRepeat={false}
    previewRepeatDelay={1000}
    recalculateHiddenLayout={true}
    removeClippedSubviews={false}
    renderHiddenItem={[Function]}
    renderItem={[Function]}
    rightOpenValue={-100}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "width": "100%",
      }
    }
    swipeToClosePercent={50}
    swipeToOpenPercent={50}
    swipeToOpenVelocityContribution={0}
    updateCellsBatchingPeriod={50}
    useAnimatedList={false}
    useNativeDriver={true}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={Object {}}
        >
          <View
            style={
              Array [
                Object {
                  "bottom": 0,
                  "left": 0,
                  "overflow": "hidden",
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                  "zIndex": 1,
                },
                Object {
                  "height": 0,
                  "width": 0,
                },
              ]
            }
          >
            <View
              style={
                Array [
                  Object {
                    "borderRadius": 3,
                    "overflow": "hidden",
                  },
                  Object {
                    "borderRadius": 3,
                  },
                  undefined,
                  false,
                ]
              }
            >
              <View
                accessibilityRole="button"
                accessibilityState={
                  Object {
                    "busy": false,
                    "disabled": false,
                  }
                }
                accessible={true}
                focusable={true}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "opacity": 1,
                  }
                }
              >
                <View
                  style={
                    Object {
                      "alignItems": "center",
                      "alignSelf": "flex-end",
                      "backgroundColor": "red",
                      "borderColor": "#2089dc",
                      "borderRadius": 3,
                      "borderWidth": 0,
                      "flexDirection": "row",
                      "height": "100%",
                      "justifyContent": "center",
                      "padding": 8,
                      "width": 100,
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "marginHorizontal": 5,
                        "overflow": "hidden",
                      }
                    }
                  >
                    <View>
                      <View
                        style={
                          Object {
                            "alignItems": "center",
                            "backgroundColor": "transparent",
                            "justifyContent": "center",
                          }
                        }
                      >
                        <Text />
                      </View>
                    </View>
                  </View>
                  <Text
                    style={
                      Object {
                        "color": "white",
                        "fontSize": 18,
                        "paddingVertical": 1,
                        "textAlign": "center",
                      }
                    }
                  >
                    Delete
                  </Text>
                </View>
              </View>
            </View>
          </View>
          <View
            manipulationModes={
              Array [
                "translateX",
              ]
            }
            onLayout={[Function]}
            onMoveShouldSetResponder={[Function]}
            onMoveShouldSetResponderCapture={[Function]}
            onResponderEnd={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderReject={[Function]}
            onResponderRelease={[Function]}
            onResponderStart={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            onStartShouldSetResponderCapture={[Function]}
            style={
              Object {
                "transform": Array [
                  Object {
                    "translateX": 0,
                  },
                ],
                "zIndex": 2,
              }
            }
          >
            <View
              accessible={true}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
            >
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "backgroundColor": "#ffffff",
                    "borderBottomWidth": 0.5,
                    "borderColor": "#bcbbc1",
                    "flexDirection": "row",
                    "padding": 14,
                  }
                }
                testID="padView"
              >
                <View
                  style={
                    Array [
                      Object {
                        "alignItems": "flex-start",
                        "flex": 1,
                        "justifyContent": "center",
                      },
                      undefined,
                    ]
                  }
                  theme={
                    Object {
                      "colors": Object {
                        "black": "#242424",
                        "disabled": "hsl(208, 8%, 90%)",
                        "divider": "#bcbbc1",
                        "error": "#ff190c",
                        "grey0": "#393e42",
                        "grey1": "#43484d",
                        "grey2": "#5e6977",
                        "grey3": "#86939e",
                        "grey4": "#bdc6cf",
                        "grey5": "#e1e8ee",
                        "greyOutline": "#bbb",
                        "platform": Object {
                          "android": Object {
                            "error": "#f44336",
                            "grey": "rgba(0, 0, 0, 0.54)",
                            "primary": "#2196f3",
                            "searchBg": "#dcdce1",
                            "secondary": "#9C27B0",
                            "success": "#4caf50",
                            "warning": "#ffeb3b",
                          },
                          "default": Object {
                            "error": "#ff3b30",
                            "grey": "#7d7d7d",
                            "primary": "#007aff",
                            "searchBg": "#dcdce1",
                            "secondary": "#5856d6",
                            "success": "#4cd964",
                            "warning": "#ffcc00",
                          },
                          "ios": Object {
                            "error": "#ff3b30",
                            "grey": "#7d7d7d",
                            "primary": "#007aff",
                            "searchBg": "#dcdce1",
                            "secondary": "#5856d6",
                            "success": "#4cd964",
                            "warning": "#ffcc00",
                          },
                          "web": Object {
                            "error": "#ff190c",
                            "grey": "#393e42",
                            "primary": "#2089dc",
                            "searchBg": "#303337",
                            "secondary": "#ca71eb",
                            "success": "#52c41a",
                            "warning": "#faad14",
                          },
                        },
                        "primary": "#2089dc",
                        "searchBg": "#303337",
                        "secondary": "#ca71eb",
                        "success": "#52c41a",
                        "warning": "#faad14",
                        "white": "#ffffff",
                      },
                    }
                  }
                >
                  <Text
                    style={
                      Object {
                        "backgroundColor": "transparent",
                        "color": "#242424",
                        "fontSize": 17,
                      }
                    }
                    testID="listItemTitle"
                  >
                    
                  </Text>
                  <Text
                    style={
                      Object {
                        "backgroundColor": "transparent",
                        "color": "#242424",
                        "fontSize": 15,
                      }
                    }
                    testID="listItemTitle"
                  >
                    Today at 11:32 PM
                  </Text>
                </View>
                <View
                  style={
                    Object {
                      "paddingLeft": 16,
                    }
                  }
                />
                <View
                  style={
                    Array [
                      Object {
                        "borderRadius": 3,
                        "overflow": "hidden",
                      },
                      Object {
                        "borderRadius": 3,
                      },
                      undefined,
                      false,
                    ]
                  }
                >
                  <View
                    accessibilityRole="button"
                    accessibilityState={
                      Object {
                        "busy": false,
                        "disabled": false,
                      }
                    }
                    accessible={true}
                    focusable={true}
                    onClick={[Function]}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Object {
                        "opacity": 1,
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "alignItems": "center",
                          "backgroundColor": "#2089dc",
                          "borderColor": "#2089dc",
                          "borderRadius": 3,
                          "borderWidth": 0,
                          "flexDirection": "row",
                          "justifyContent": "center",
                          "padding": 8,
                        }
                      }
                    >
                      <Text
                        style={
                          Object {
                            "color": "white",
                            "fontSize": 18,
                            "paddingVertical": 1,
                            "textAlign": "center",
                          }
                        }
                      >
                        convert to text
                      </Text>
                    </View>
                  </View>
                </View>
                <View
                  style={
                    Object {
                      "paddingLeft": 16,
                    }
                  }
                />
                <View
                  style={
                    Object {
                      "alignSelf": "center",
                      "overflow": "hidden",
                    }
                  }
                >
                  <View>
                    <View
                      style={
                        Object {
                          "alignItems": "center",
                          "backgroundColor": "transparent",
                          "justifyContent": "center",
                        }
                      }
                    >
                      <Text />
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>
  <RNCSafeAreaView
    edges={
      Array [
        "bottom",
      ]
    }
    style={
      Object {
        "backgroundColor": "gray",
        "width": "100%",
      }
    }
  >
    <View
      accessibilityRole="button"
      accessibilityState={Object {}}
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Start Recording
        </Text>
      </View>
    </View>
  </RNCSafeAreaView>
</View>
`;
